#!/usr/bin/env python

import codecs, os, subprocess
from time import strftime, localtime

""" workflow:

- parse metadata.yaml

- extract filenames for abstract, dedication, acknowldgements

- open each of these save included text as a variable for pandoc's `-M` flag
	- eg: -M abstract="the text of the abstract"

- in order, open and add together the other .md files

- concatenate these together and send to pandoc
	- pandoc will parse the input files
	- filter the documnet with the pandoc-citeproc filter, which replaces
	citations with properly formatted numbers, and inserts at the end a
	a list of references according to the citation format specified in the
	`.csl` listed in the metadata.yaml file
	- generate an output LaTeX document using a LaTeX custom writer
	- save this latex document in the builds folder under to current date and hour

- run pdflatex several times on this latex document

- run makeindex

- run pdflatex several more times

- TODO: add idempotent test (only run pdflatex until no more changes are made to it's source files)

"""

# helper function which looks in a directory, reads the metadata.yaml file in the
#	directory and returns a dictionary of the files to be included in the
#	dissertation
def meta_files(dir):
	files = {}
	with codecs.open(os.path.join(dir,'metadata.yaml'), encoding='utf-8', mode="r") as meta_file:
		in_chapters = False
		for line in meta_file:

			if line.startswith("acknowledgements: "):
				files["ack"] = line[line.find("acknowledgements: ")+len("acknowledgements:"):].strip()
			elif line.startswith("dedication: "):
				files["ded"] = line[line.find("dedication: ")+len("dedication: "):].strip()
			elif line.startswith("abstract: "):
				files["abs"] = line[line.find("abstract: ")+len("abstract: "):].strip()
			elif in_chapters == True:
				if line.startswith("- "):
					if "chaps" not in files:
						files["chaps"] = [line.lstrip("- ").strip()]
					else:
						files["chaps"] += [line.lstrip("- ").strip()]
				else: in_contents = False
			elif line.startswith("chapters:"):
				in_chapters = True
	return files

# helper function which takes a file name, opens it, reads its entire contents,
#	 and runs it through pandoc to convert any markdown fromatting into LaTeX formatting
#	 and returns this LaTeX formatted text as a long string
def file_contents(file_name):
		raw_text = ""
		with codecs.open(file_name, encoding='utf-8', mode="r") as in_file:
			raw_text = in_file.read()

		cmd = "pandoc -t ./bin/umms_thesis_writer.lua"

		p1 = subprocess.Popen(cmd, shell=True, stdin = subprocess.PIPE, stdout=subprocess.PIPE)
		formatted_text, err = p1.communicate(raw_text)
		# TODO: check err?

		return formatted_text

# runs the pandoc program on the dissertation source files found in the input directory
# 	 and writes a latex document with formatted citations into the outpur directory
def run_pandoc(in_dir, out_dir):

	files = meta_files(in_dir)
	pandoc_metadata = [
		'-M', 'abstract="' + file_contents(files["abs"]) + '"',
		'-M', 'dedication="' + file_contents(files["ded"]) + '"',
		'-M', 'acknowledgements="' + file_contents(files["ack"]) + '"'
	]

	pandoc_chapters = files["chaps"]

	cmd = (
		"pandoc -t " +
		in_dir + "/bin/umms_thesis_writer.lua" +
		" --template=" + in_dir + "/bin/umms-thesis-template.tex" +
		" --filter pandoc-citeproc" +
		" -o " + out_dir + "/thesis.tex" +
		" " + " ".join(pandoc_metadata) +
		" metadata.yaml " + " ".join(pandoc_chapters)
	)

	subprocess.call(cmd, shell=True)


# runs the xelatex command on the thesis.tex file found in the supplied directory
def run_pdflatex(out_dir):

	cmd = (
		"xelatex" +
		" -interaction=nonstopmode" +
		" -output-directory=" + out_dir +
		" " + out_dir + "/thesis.tex"
	)
	p1 = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
	stdout = p1.communicate()


# runs the makeindex command on the thesis.tex file found in the supplied directory
#	 this command generates the list of abbreviations etc.
def run_makeindex(dir):
# 	makeindex build/2016-07-15-210328/test.nlo -s nomencl.ist -o build/2016-07-15-210328/test.nls
	cmd = "makeindex -q " + dir + "/thesis.nlo -s nomencl.ist -o " +dir+"/thesis.nls "
	subprocess.call(cmd, shell=True)

# helper function which creates a build/output directory for the resulting dissertation output
#	the directory is labeled with the current date and hour. Because of this every hour a new
#	directory is created and populated, leaving the last directory along
#
#	nb: this behaviour might not be ideal, but for now it generates versions
#		ensures some version are kept and not written over during compilation
#	TODO somehow include the date or version label into the pdf file
def make_out_dir(pwd):

	build_time = strftime("%Y-%m-%d-%H", localtime())
	curr_files = os.listdir(pwd)
	if "builds" not in curr_files:
		os.mkdir("builds")
	build_dir = os.path.join("builds", build_time)
	try:
		os.mkdir(build_dir)
	except OSError:
		pass
	return build_dir

if __name__ == "__main__":
	pwd = os.getcwd()

	build_dir = make_out_dir(pwd)

	run_pandoc(pwd, build_dir)

	run_pdflatex(build_dir)

	run_pdflatex(build_dir)

	run_makeindex(build_dir)

	run_pdflatex(build_dir)

	run_pdflatex(build_dir)

	# TODO: internal references? (or just latex \ref{}, \pageref{}

	# TODO: change output dir to temp, then move pdf to compile

	# TODO: add draft information...(version and/or date/time?)
